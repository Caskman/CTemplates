#!/usr/bin/env python
import re,sys,os,getopt
from sys import exit
usage = """Usage:  -l <list_type_name> -- for list template
        -t <"key_typename,value_typename"> -- for hash table template
        -o <output_directory> -- optional
        -i -- generate implementation header file
        -I -- generate only the implementation header file
"""
# template list 
TEMPLATE_LIST_CODE = 'templatelist.c'
TEMPLATE_LIST_CODE_SUFFIX = 'list.c'
TEMPLATE_LIST_HEADER = 'templatelist.h'
TEMPLATE_LIST_HEADER_SUFFIX = 'list.h'
TEMPLATE_LIST_IMP_HEADER = 'templatelist_imp.h'
TEMPLATE_LIST_IMP_HEADER_SUFFIX = 'list_imp.h'
# template hash table
TEMPLATE_HASHTABLE_CODE = 'templatehashtable.c'
TEMPLATE_HASHTABLE_HEADER = 'templatehashtable.h'
TEMPLATE_HASHTABLE_IMP_HEADER = 'templatehashtable_imp.h'
TEMPLATE_HASHTABLE_TYPES_HEADER = 'templatehashtabletypes.h'
TEMPLATE_HASHTABLE_CODE_SUFFIX = 'hashtable.c'
TEMPLATE_HASHTABLE_HEADER_SUFFIX = 'hashtable.h'
TEMPLATE_HASHTABLE_IMP_HEADER_SUFFIX = 'hashtable_imp.h'
TEMPLATE_HASHTABLE_TYPES_HEADER_SUFFIX = 'hashtabletypes.h'


template_files = [TEMPLATE_LIST_HEADER,TEMPLATE_LIST_CODE,TEMPLATE_LIST_IMP_HEADER]
templatedir = '/home/uofkuv/453/Structures/template/templates/'
arg_options = 'l:t:o:iIh'
outputdir = './'
generate_implementation_header = False
generate_template_files = True

def checkOutputDir(dir):
    if os.path.exists(dir):
        if os.path.isdir(dir):
            if os.access(dir,os.W_OK):
                return True
            else:
                print 'Error: do not have write permission for '+dir
        else:
            print 'Error: '+dir+' is not a directory'
    else:
        print 'Error: '+dir+' does not exist'


def filter_text(contents,type,upper,lower):
    contents = re.sub(r'\$\$',type,contents)
    contents = re.sub(r'\$\^\^\$',upper,contents)
    contents = re.sub(r'\$v\$',lower,contents)
    return contents

def subContents(contents,subs):
    for sub in subs:
        contents = re.sub(sub[0],sub[1],contents)
    return contents

def templatize(filein,fileout,subs):
    with open(filein,'r') as f:
        contents = f.read()
        # print 'opened template file'
        contents = subContents(contents,subs)
        # print 'replaced template file contents'
    with open(fileout,'w') as f:
        f.write(contents)
        # print 'wrote new template file contents'

def create_template_hashtable(template_type):
    splits = template_type.split(',')
    key = splits[0]
    value = splits[1]
    entry_name = key+'K'+value+'V'
    lower_entry_name = entry_name.lower()

    subs = [(r'\$KK\$',key.upper())
        ,(r'\$Kk\$',key)
        ,(r'\$kk\$',key.lower())
        ,(r'\$VV\$',value.upper())
        ,(r'\$Vv\$',value)
        ,(r'\$vv\$',value.lower())]

    if generate_template_files:
        # Create the bucket structure
        create_template_list(entry_name+'Entry')

        templatize(templatedir + TEMPLATE_HASHTABLE_CODE,outputdir + lower_entry_name + TEMPLATE_HASHTABLE_CODE_SUFFIX,subs)
        templatize(templatedir + TEMPLATE_HASHTABLE_HEADER,outputdir + lower_entry_name + TEMPLATE_HASHTABLE_HEADER_SUFFIX,subs)
        templatize(templatedir + TEMPLATE_HASHTABLE_TYPES_HEADER,outputdir + lower_entry_name + TEMPLATE_HASHTABLE_TYPES_HEADER_SUFFIX,subs)

    if generate_implementation_header:
        templatize(templatedir + TEMPLATE_HASHTABLE_IMP_HEADER,outputdir + lower_entry_name + TEMPLATE_HASHTABLE_IMP_HEADER_SUFFIX,subs)




def create_template_list(template_type):
    # print 'Creating template list of type: '+template_type
    upper = template_type.upper()
    lower = template_type.lower()

    if generate_template_files:
        with open(templatedir+TEMPLATE_LIST_CODE,'r') as filein:
            contents = filein.read()
            code = filter_text(contents,template_type,upper,lower)
        with open(outputdir+lower+TEMPLATE_LIST_CODE_SUFFIX,'w') as fileout:
            fileout.write(code)


        with open(templatedir+TEMPLATE_LIST_HEADER,'r') as filein:
            contents = filein.read()
            header = filter_text(contents,template_type,upper,lower)
        with open(outputdir+lower+TEMPLATE_LIST_HEADER_SUFFIX,'w') as fileout:
            fileout.write(header)

    if (generate_implementation_header):
        with open(templatedir+TEMPLATE_LIST_IMP_HEADER,'r') as filein:
            contents = filein.read()
            header_imp = filter_text(contents,template_type,upper,lower)
        with open(outputdir+lower+TEMPLATE_LIST_IMP_HEADER_SUFFIX,'w') as fileout:
            fileout.write(header_imp)


if __name__ == '__main__':
    # print 'Check templatedir'
    # check that template directory exists in working directory
    if os.path.exists(templatedir):
        if not os.path.isdir(templatedir):
            print 'Template directory does not exist'
            exit(2)
    else:
        print 'Template directory does not exist'
        exit(2)
    # print 'Check that template files exist'
    # check that template files exist
    for template_file in template_files:
        if not os.path.exists(templatedir+template_file):
            print 'Template file <'+template_file+'> does not exist'
            exit(2)

    # print 'Arguments: ' + str(sys.argv)
    # print 'Check CL args'
    try:
        opts,args = getopt.getopt(sys.argv[1:],arg_options)
    except getopt.GetoptError:
        print usage
        exit(2)

    # print 'Opts: '+str(opts)
    # print 'Args: '+str(args)
    # print 'Check only one option'
    # if len(opts) != 1:
    #     print 'Specify one option'
    #     print usage
    #     # print opts
    #     exit(2)


    # print 'Execute'
    # print opts
    for opt in opts:
        # print opt
        if opt[0] == '-l':
            executee = create_template_list
            earg = opt[1]
            # create_template_list(opt[1])
        elif opt[0] == '-t':
            executee = create_template_hashtable
            earg = opt[1]
        elif opt[0] == '-o':
            if checkOutputDir(opt[1]):
                outputdir = opt[1]
            else:
                exit(2)
        elif opt[0] == '-i':
            generate_implementation_header = True
        elif opt[0] == '-I':
            generate_implementation_header = True
            generate_template_files = False
        elif opt[0] == '-h':
            print usage
            exit(0)
        else:
            print 'Error: unrecognized option '+opt[0]
            print usage
            exit(2)
    if 'executee' in globals():
        executee(earg)
    else:
        print 'Error: must choose a data structure to generate'
        print usage
        exit(2)















