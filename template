#!/usr/bin/env python
import re,sys,os,getopt
from sys import exit
usage = """Usage:  -l <list_type_name> -- for list template
        -t <hash_table_type_name> -- for hash table template
        -o <output_directory> -- optional
        -i -- generate implementation header file
        -I -- generate only the implementation header file
"""

template_list_header = 'templatelist.h'
template_list_header_filename_suffix = 'list.h'
template_list_code = 'templatelist.c'
template_list_code_filename_suffix = 'list.c'
template_list_imp_header = 'templatelist_imp.h'
template_list_imp_header_filename_suffix = 'list_imp.h'


template_files = [template_list_header,template_list_code,template_list_imp_header]
templatedir = '/home/uofkuv/453/Structures/template/templates/'
arg_options = 'l:t:o:iIh'
outputdir = './'
generate_implementation_header = False
generate_template_files = True

def checkOutputDir(dir):
    if os.path.exists(dir):
        if os.path.isdir(dir):
            if os.access(dir,os.W_OK):
                return True
            else:
                print 'Error: do not have write permission for '+dir
        else:
            print 'Error: '+dir+' is not a directory'
    else:
        print 'Error: '+dir+' does not exist'


def filter_text(contents,type,upper,lower):
    contents = re.sub(r'\$\$',type,contents)
    contents = re.sub(r'\$\^\^\$',upper,contents)
    contents = re.sub(r'\$v\$',lower,contents)
    return contents


def create_template_list(template_type):
    print 'Creating template list of type: '+template_type
    upper = template_type.upper()
    lower = template_type.lower()


    with open(templatedir+template_list_code,'r') as filein:
        contents = filein.read()
        code = filter_text(contents,template_type,upper,lower)
    with open(outputdir+lower+template_list_code_filename_suffix,'w') as fileout:
        fileout.write(code)


    with open(templatedir+template_list_header,'r') as filein:
        contents = filein.read()
        header = filter_text(contents,template_type,upper,lower)
    with open(outputdir+lower+template_list_header_filename_suffix,'w') as fileout:
        fileout.write(header)

    if (generate_implementation_header):
        with open(templatedir+template_list_imp_header,'r') as filein:
            contents = filein.read()
            header_imp = filter_text(contents,template_type,upper,lower)
        with open(outputdir+lower+template_list_imp_header_filename_suffix,'w') as fileout:
            fileout.write(header_imp)


if __name__ == '__main__':
    # print 'Check templatedir'
    # check that template directory exists in working directory
    if os.path.exists(templatedir):
        if not os.path.isdir(templatedir):
            print 'Template directory does not exist'
            exit(2)
    else:
        print 'Template directory does not exist'
        exit(2)
    # print 'Check that template files exist'
    # check that template files exist
    for template_file in template_files:
        if not os.path.exists(templatedir+template_file):
            print 'Template file <'+template_file+'> does not exist'
            exit(2)

    # print 'Arguments: ' + str(sys.argv)
    # print 'Check CL args'
    try:
        opts,args = getopt.getopt(sys.argv[1:],arg_options)
    except getopt.GetoptError:
        print usage
        exit(2)

    # print 'Opts: '+str(opts)
    # print 'Args: '+str(args)
    # print 'Check only one option'
    # if len(opts) != 1:
    #     print 'Specify one option'
    #     print usage
    #     # print opts
    #     exit(2)


    # print 'Execute'
    # print opts
    for opt in opts:
        # print opt
        if opt[0] == '-l':
            executee = create_template_list
            earg = opt[1]
            # create_template_list(opt[1])
        elif opt[0] == '-t':
            print "Hash tables haven't been implemented yet"
        elif opt[0] == '-o':
            if checkOutputDir(opt[1]):
                outputdir = opt[1]
            else:
                exit(2)
        elif opt[0] == '-i':
            generate_implementation_header = True
        elif opt[0] == '-I':
            generate_implementation_header = True
            generate_template_files = False
        elif opt[0] == '-h':
            print usage
            exit(0)
        else:
            print 'Error: unrecognized option '+opt[0]
            print usage
            exit(2)
    if 'executee' in globals():
        executee(earg)
    else:
        print 'Error: must choose a data structure to generate'
        print usage
        exit(2)















